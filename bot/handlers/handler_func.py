import os

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext

from bot.bot_init import bot
from bot.keyboards.keyboards_method import StartMenu, find_actor_keyboard
from bot.kino_poisk_search import search_actor_by_name
from bot.states.user_state import UserState

router = Router()
API_KEY = token_bot = os.environ["KINO_KEY"]
actors = []
page_actor = 1


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        text="üé• –ü—Ä–∏–≤–µ—Ç, —è –ë–æ—Ç FullFilm!\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–∫—Ç—ë—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –¥–∞–∂–µ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏. üìö\n"
        "–í–æ—Ç –∫–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω:\n"
        "1. –ü–æ–∏—Å–∫ –∞–∫—Ç—ë—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º: –í–≤–µ–¥–∏ –∏–º—è –∞–∫—Ç—ë—Ä–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –¥–ª—è —Ç–µ–±—è. üë§\n"
        "2. –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ: –ù–µ –ø–æ–º–Ω–∏—à—å –∏–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é? –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã. üî§\n"
        "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö: –£–∑–Ω–∞–π, –≤ –∫–∞–∫–∏—Ö —Ñ–∏–ª—å–º–∞—Ö —Å–Ω–∏–º–∞–ª—Å—è –∞–∫—Ç—ë—Ä. üé¨\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∏—Å–∫–∞—Ç—å —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤! üåü", reply_markup=StartMenu())


@router.message(UserState.wait_word_search)
async def search_actor(message: types.Message, state: FSMContext):
    actor_name = message.text
    search_results = search_actor_by_name(actor_name, API_KEY)
    global actors, page_actor
    page_actor = 0
    actors = search_results.get('docs', [])

    if actors:
        keyboard = find_actor_keyboard(actors, page_actor)
        page_actor = page_actor + 1
        await message.answer("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    else:
        await message.answer("üò≠ –ê–∫—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(lambda c: c.data and c.data.startswith('actor'))
async def process_page(callback_query: types.CallbackQuery):
    global page_actor
    page_actor = int(callback_query.data.split('_')[1])
    keyboard = find_actor_keyboard(actors, page_actor)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)