from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputMediaPhoto
from aiogram.utils.media_group import MediaGroupBuilder

from bot.bot_init import bot as image_bot, bot
from bot.handlers.handler_func import API_KEY
from bot.keyboards.keyboards_method import create_movie_buttons
from bot.kino_poisk_search import get_actor_by_id, get_movie_by_id
from bot.states.user_state import UserState

callback_router = Router()
page = 1
movies = []


@callback_router.callback_query(F.data == "info")
async def InfoBot(callback: types.CallbackQuery):
    faq_text = (
        "üìã FAQ:\n\n"
        "1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n"
        "   –î–ª—è –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "2. –ö–∞–∫ –Ω–∞–π—Ç–∏ –∞–∫—Ç—ë—Ä–∞?\n"
        "   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§∏‚Äç‚ôÇÔ∏è–ü–æ–∏—Å–∫ –∞–∫—Ç—ë—Ä–∞' –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–∫—Ç—ë—Ä–∞.\n\n"
        "3. –ö–∞–∫ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ?\n"
        "   –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∞–∫—Ç—ë—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –∏–º—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
    await callback.message.answer(faq_text)


@callback_router.callback_query(F.data == "start_search")
async def InfoBot(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–∫—Ç—ë—Ä–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –µ–≥–æ –ø–æ–∏—Å–∫–∞."
                                  " üîç –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è."
                                  " –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—É. üí¨\n\n"
                                  "üî¥ –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(UserState.wait_word_search)


@callback_router.callback_query(lambda c: c.data.isdigit())
async def process_actor_callback(callback_query: types.CallbackQuery, state: FSMContext):
    global page
    page = 0
    info_message = ""

    actor_id = callback_query.data
    actor_info = get_actor_by_id(actor_id, API_KEY)
    name = actor_info.get('name')
    if name:
        info_message = info_message + f"üë§ –ò–º—è: {name}\n"
    en_name = actor_info.get('enName')
    if en_name:
        info_message = info_message + f"üá¨üáß –ò–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {en_name}\n"
    birthday = actor_info.get('birthday')

    if birthday:
        birthday = birthday.split('T')[0]
        info_message = info_message + f"üë∂ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"

    birth_place = actor_info.get('birthPlace')
    if birth_place:
        birth_place = ", ".join([place['value'] for place in birth_place])
        info_message = info_message + f"üè† –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}\n"

    age = actor_info.get('age')
    if age:
        info_message = info_message + f"üîü –í–æ–∑—Ä–∞—Å—Ç: {age}\n"

    sex = actor_info.get('sex', "–ü–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω")
    if sex:
        info_message = info_message + f"üéö –ü–æ–ª: {sex}\n"

    global movies
    movies = actor_info.get('movies', [])
    photo_url = actor_info.get('photo')

    if movies:
        info_message = info_message + "üé• –§–∏–ª—å–º—ã:"
    else:
        info_message = info_message + "üìõ –ê–∫—Ç—ë—Ä –Ω–µ —Å–Ω–∏–º–∞–ª—Å—è –≤ —Ñ–∏–ª—å–º–∞—Ö"

    keyboard = create_movie_buttons(movies, page)
    page = page + 1

    if photo_url:
        await image_bot.send_photo(chat_id=callback_query.from_user.id, photo=photo_url,
                                   caption=info_message, reply_markup=keyboard)
    else:
        await image_bot.send_message(callback_query.from_user.id, info_message, reply_markup=keyboard)


@callback_router.callback_query(lambda c: c.data.startswith("movie_"))
async def process_movie_callback(callback_query: types.CallbackQuery):
    movie_id = callback_query.data.split("_")[1]
    movie_info = get_movie_by_id(movie_id, API_KEY)

    movie_message = ""

    title = movie_info.get('name') or movie_info.get('alternativeName')
    if title:
        movie_message = movie_message + f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"

    year = movie_info.get('year')
    if year:
        movie_message = movie_message + f"üìÖ –ì–æ–¥: {year}\n"
    description = movie_info.get('description')
    if description:
        short_description = ""
        for i in range(0, 4):
            try:
                short_description = short_description + description.split('.')[i]
            except IndexError:
                print("–ï–≥–æ—Ä")

        short_description = short_description + "..."
        print(short_description)
        movie_message = movie_message + f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {short_description}\n"
    slogan = movie_info.get('slogan')
    if slogan:
        movie_message = movie_message + f"üí¨ –°–ª–æ–≥–∞–Ω: {slogan}\n"
    rating_kp = movie_info.get('rating', {}).get('kp')
    if rating_kp:
        movie_message = movie_message + f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {rating_kp}\n"
    rating_imdb = movie_info.get('rating', {}).get('imdb')
    if rating_imdb:
        movie_message = movie_message + f"üåü –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating_imdb}\n"
    movie_length = movie_info.get('movieLength')
    if movie_length:
        movie_message = movie_message + f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie_length} –º–∏–Ω—É—Ç\n"
    genres = ", ".join([genre['name'] for genre in movie_info.get('genres', [])])
    if genres:
        movie_message = movie_message + f"üé≠ –ñ–∞–Ω—Ä—ã: {genres}\n"
    countries = ", ".join([country['name'] for country in movie_info.get('countries', [])])
    if countries:
        movie_message = movie_message + f"üåç –°—Ç—Ä–∞–Ω—ã: {countries}"
    poster_url = movie_info.get('poster', {}).get('url')

    if poster_url:
        media_group = MediaGroupBuilder(caption=movie_message)
        media_group.add(type="photo", media=poster_url)
        await callback_query.message.answer_media_group(media=media_group.build())
    else:
        await image_bot.send_message(callback_query.from_user.id, movie_message)


@callback_router.callback_query(lambda c: c.data.startswith("page_"))
async def process_page_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    keyboard = create_movie_buttons(movies, page)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
